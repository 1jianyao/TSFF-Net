## YOLOv5 🚀 by Ultralytics, GPL-3.0 license
#
## Parameters
#nc: 1  # number of classes
#depth_multiple: 0.33  # model depth multiple
#width_multiple: 0.50  # layer channel multiple
#fusion_depth: 2  # layer channel multiple
#anchors:
#  - [10,13, 16,30, 33,23]  # P3/8
#  - [30,61, 62,45, 59,119]  # P4/16
#  - [116,90, 156,198, 373,326]  # P5/32
#
## 设计一个自适应融合模块(只取代前两层，输出通道数为128，大小缩放两倍，这里原来只经过两层卷积)
## 分别对两种图片进行特征提取，然后使用自注意力机制自适应融合
#backbone1:
#  # [from, number, module, args]
#  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
#   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#  ]
#
#
#
#backbone2:
#  # [from, number, module, args]
#  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
#   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#   [[-1,1], 1, Add_Adaptive, [256,128,12,1]]  # 0
#   [-1, 3, C3, [128]],
#   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#   [-1, 6, C3, [256]],
#   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#   [-1, 9, C3, [512]],
#   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#   [-1, 3, C3, [1024]],
#   [-1, 1, SPPF, [1024, 5]],  # 9
#  ]
#
## YOLOv5 v6.0 head
#head:
#  [[-1, 1, Conv, [512, 1, 1]],      # 输出为512*20*20
#   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  # 上采样 输出为512*40*40
#   [[-1, 7], 1, Concat, [1]],  # cat backbone P4  上一层和第6层相加（大小不变，深度相加），输出1024*40*40
#   [-1, 3, C3, [512, False]],  # 14     输出512*40*40
#
#   [-1, 1, Conv, [256, 1, 1]],        # 输出 256*40*40
#   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  # 输出 256*80*80
#   [[-1, 5], 1, Concat, [1]],  # cat backbone P3   # 输出 512*80*80
#   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)   # 输出 256*80*80
#
#   [-1, 1, Conv, [256, 3, 2]],     # 输出 256*40*40
#   [[-1, 15], 1, Concat, [1]],  # cat head P4    # 输出 512*40*40
#   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)   # 输出 512*40*40
#
#   [-1, 1, Conv, [512, 3, 2]],                      # 输出 512*20*20
#   [[-1, 11], 1, Concat, [1]],  # cat head P5      # 输出 1024*20*20
#   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)   # 输出 1024*20*20
#
#   [[18, 21, 24], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#  ]

# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 1  # number of classes
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.50  # layer channel multiple
fusion_depth: 2  # layer channel multiple
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# 设计一个自适应融合模块
backbone1:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2  [ch_out, kernel, stride, padding]=[64, 6, 2, 2] 故输出为[64*320*320]
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  输出为128*160*160
  ]


backbone2:
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 2-P1/2  [ch_out, kernel, stride, padding]=[64, 6, 2, 2] 故输出为[64*320*320]
   [-1, 1, Conv, [128, 3, 2]],  # 3-P2/4  输出为128*160*160
   [[-1,1], 1, Add_Adaptive, [128,12,1]],
   [-1, 3, C3, [128]],                    #5 输出为128*160*160
   [-1, 1, Conv, [256, 3, 2]],  # 6-P3/8  输出为256*80*80
   [-1, 6, C3, [256]],                    # 输出为256*80*80
   [-1, 1, Conv, [512, 3, 2]],  # 8-P4/16   输出为512*40*40
   [-1, 9, C3, [512]],                     # 输出为512*40*40
   [-1, 1, Conv, [1024, 3, 2]],  # 10-P5/32   输出为1024*20*20
   [-1, 3, C3, [1024]],                    # 输出为1024*20*20
   [-1, 1, SPPF, [1024, 5]],  # 12        # 输出为1024*20*20
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 9], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 7], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 17], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 13], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[20, 23, 26], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]

